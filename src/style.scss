*{
  font-family: Helvetica;
  color: black;
  font-size: 20px;
}

.desc{
  display: inline-flex;
  font-size: 15px;
  justify-content: center;

}

.about{
  font-size: 15px;
}

#canvas-complex {

    display: block;
    width: 100%;
    height: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: -1;
}

hr{
  border: 2px solid black;
}


div.container.header{
    position: absolute;
    width: 100%;
    margin: 0px;
}

.devicon-git-plain {
  max-width: 2em;
}

@mixin grayscale_element($value) {
    -webkit-filter: #{"grayscale(#{$value})"};
    -moz-filter: #{"grayscale(#{$value})"};
    filter:#{"grayscale(#{$value})"};
}


@keyframes rotation {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
}



.grayscale {
    @include grayscale_element(100%);
    transition: all 200ms ease-in-out;
    &:hover {
        @include grayscale_element(0);
        animation: rotation 2s infinite linear;
    }
    display: inline-block;

}


// @mixin glitchCopy {
// 		content: attr(data-text);
// 		position: absolute;
// 		top: 0;
// 		left: 0;
// 		width: 100%;
// 		height: 100%;
// }

// .glitch  {
//   &:hover{
// 	position: relative;
// 	color: black;
// 	/* Animation provies a slight random skew. Check bottom of doc
// 	for more information on how to random skew. */
// 	animation: glitch-skew 1s infinite linear alternate-reverse;
//
// 	// Creates a copy before our text.
// 	&::before{
// 		// Duplicates our text with the mixin.
// 		@include glitchCopy;
// 		// Scoots text slightly to the left for the color offset.
// 		left: 2px;
// 		// Creates the color 'shadow' that happens on the glitch.
// 		text-shadow: -2px 0 #ff00c1;
// 		/* Creates an initial clip for our glitch. This works in
// 		a typical top,right,bottom,left fashion and creates a mask
// 		to only show a certain part of the glitch at a time. */
// 		clip: rect(44px, 450px, 56px, 0);
// 		/* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
// 		with an alternating animation to keep things fresh. */
// 		animation: glitch-anim 5s infinite linear alternate-reverse;
// 	}
//
// 	// Creates a copy after our text. Note comments from ::before.
// 	&::after {
// 		@include glitchCopy;
// 		left: -2px;
// 		text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
// 		animation: glitch-anim2 1s infinite linear alternate-reverse;
// 	}
// }
//
// /* Creates an animation with 20 steaps. For each step, it calculates
// a percentage for the specific step. It then generates a random clip
// box to be used for the random glitch effect. Also adds a very subtle
// skew to change the 'thickness' of the glitch.*/
// @keyframes glitch-anim {
//   $steps: 20;
//   @for $i from 0 through $steps {
//     #{percentage($i*(1/$steps))} {
//       clip: rect(random(100)+px, 9999px, random(100)+px, 0);
// 			transform: skew((random(100) / 100) + deg);
//     }
//   }
// }
//
// // Same deal, just duplicated for ultra randomness.
// @keyframes glitch-anim2 {
//   $steps: 20;
//   @for $i from 0 through $steps {
//     #{percentage($i*(1/$steps))} {
//       clip: rect(random(100)+px, 9999px, random(100)+px, 0);
// 			transform: skew((random(100) / 100) + deg);
//     }
//   }
// }
//
// // Does the same deal as before, but now only skews. Used for main text.
// @keyframes glitch-skew {
//   $steps: 10;
//   @for $i from 0 through $steps {
//     #{percentage($i*(1/$steps))} {
//       transform: skew((random(10) - 5) + deg);
//     }
//   }
// }
//}

.column{


}

.logo{
  margin-left: 40px;
  color: black;
}

.footer{
  font-size: 15px;
  background-color: white;
  text-decoration: none;
  a{
    text-decoration: none;
    font-size: 15px;
    color: black;
  }
}

a{
  text-decoration: none;
}


.modal-card-body{
  background-color: black;
  color: #4AF626;
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  transition: all 0.5s;
  font-size: 0.6em;
  font-family: Lucida Console,Lucida Sans Typewriter,monaco,Bitstream Vera Sans Mono,monospace;
}

.modal-card-head{
  font-weight: bold;
  border-radius: 0;
}


.tooltip {
  position: relative;
  display: inline-block;

}

/* Tooltip text */
.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  color: black;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;

  /* Position the tooltip text - see examples below! */
  position: absolute;
  z-index: 1;

  background: linear-gradient(147deg, #eebdea, #e0eebd, #bdeeee);
  background-size: 600% 600%;

-webkit-animation: AnimationName 4s ease infinite;
-moz-animation: AnimationName 4s ease infinite;
animation: AnimationName 4s ease infinite;

@-webkit-keyframes AnimationName {
    0%{background-position:45% 0%}
    50%{background-position:56% 100%}
    100%{background-position:45% 0%}
}
@-moz-keyframes AnimationName {
    0%{background-position:45% 0%}
    50%{background-position:56% 100%}
    100%{background-position:45% 0%}
}
@keyframes AnimationName {
    0%{background-position:45% 0%}
    50%{background-position:56% 100%}
    100%{background-position:45% 0%}
}

}

/* Show the tooltip text when you mouse over the tooltip container */
.tooltip:hover .tooltiptext {
  visibility: visible;
}
